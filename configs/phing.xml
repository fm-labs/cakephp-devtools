<?xml version="1.0" encoding="UTF-8"?>
<!--
CakeDev Tools Phing configuration v1.1.0
-->
<project name="project" default="info">
    <!-- property env: Load environment values -->
    <property environment="env" />
    <!-- property basedir: Base dir. MUST point to the project root directory. Defaults to ${project.basedir} -->
    <property name="basedir" value="${project.basedir}"/>
    <!-- property devtools.configdir: Internal config location -->
    <property name="devtools.configdir" value="${project.basedir}" />

    <!-- Tools binary location properties -->
    <property name="pdepend.bin" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcpd.bin"  value="${basedir}/vendor/bin/phpcpd"/>
    <property name="phpcs.bin"   value="${basedir}/vendor/bin/phpcs"/>
    <property name="phpcbf.bin"  value="${basedir}/vendor/bin/phpcbf"/>
    <property name="phpdox.bin"  value="${basedir}/vendor/bin/phpdox"/>
    <property name="phploc.bin"  value="${basedir}/vendor/bin/phploc"/>
    <property name="phpmd.bin"   value="${basedir}/vendor/bin/phpmd"/>
    <property name="phpunit.bin" value="${basedir}/vendor/bin/phpunit"/>
    <property name="phpstan.bin" value="${basedir}/vendor/bin/phpstan"/>

    <!-- PhpUnit properties -->
    <!-- property phpunit.args: PhpUnit args read from env variable 'PHPUNIT_ARGS' -->
    <property name="phpunit.args" value="${env.PHPUNIT_ARGS}" />
    <property name="phpunit.configuration" value="${basedir}/phpunit.xml.dist" />

    <!-- PhpDox properties -->
    <!-- property phpunit.args: PhpUnit args read from env variable 'PHPUNIT_ARGS' -->
    <property name="phpdox.configuration" value="${basedir}/phpdox.xml.dist" />

    <!-- Properties from file (optional) -->
    <property file="${basedir}/build.properties" quiet="true" override="true" />

    <!-- INFO -->
    <target name="info" description="Shows build description">
        <echo>project.name: ${project.name}</echo>
        <echo>project.basedir: ${project.basedir}</echo>
        <echo>devtools.configdir: ${devtools.configdir}</echo>
        <echo>basedir: ${basedir}</echo>
        <echoproperties />
    </target>

    <target name="full-build"
            depends="prepare,static-analysis,phpunit,phpdox,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="full-build-parallel"
            depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
            description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="quick-build"
            depends="prepare,lint,phpunit-no-coverage"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="quick-test"
            depends="prepare,phpunit-no-coverage,-check-failure"
            description="Runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpstan-ci"
            description="Performs static analysis" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <phingcall target="pdepend"/>
                <phingcall target="phpmd-ci"/>
            </sequential>
            <phingcall target="lint"/>
            <phingcall target="phpcpd-ci"/>
            <phingcall target="phpcs-ci"/>
            <phingcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <!-- LINT -->
    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
            </fileset>
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <!-- PHP LOC -->
    <target name="phploc"
            unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc.bin}" logoutput="true">
            <arg value="--count-tests" />
            <arg path="${basedir}/src/*" />
            <arg path="${basedir}/tests/*" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc.bin}" logoutput="true">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/src/*" />
            <arg path="${basedir}/tests/*" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <!-- PDEPEND -->
    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend.bin}" logoutput="true">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="--dependency-xml=${basedir}/build/pdepend/dependencies.xml" />
            <arg value="--summary-xml=${basedir}/build/pdepend/summary.xml" />
            <arg value="--ignore=${basedir}/tests" />
            <arg value="--configuration=${devtools.configdir}/pdepend.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <!-- PHP MD -->
    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd.bin}" logoutput="true">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${devtools.configdir}/phpmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd.bin}" logoutput="true">
            <arg value="${basedir}/src" />
            <arg value="xml" />
            <arg path="${devtools.configdir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <!-- PHP CS -->
    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs.bin}" logoutput="true">
            <!-- Path relative to vendor/squizlabs/php_codesniffer -->
            <arg line="--config-set installed_paths ../../../vendor/cakephp/cakephp-codesniffer"/>
        </exec>
        <exec executable="${phpcs.bin}" logoutput="true">
            <arg value="--standard=CakePHP" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <!-- <arg value="-v" /> -->
            <arg path="${basedir}/src/*" />
            <!--
            <arg path="${basedir}/tests/*" />
            -->
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs.bin}" logoutput="true">
            <!-- Path relative to vendor/squizlabs/php_codesniffer -->
            <arg line="--config-set installed_paths ../../../vendor/cakephp/cakephp-codesniffer"/>
        </exec>
        <exec executable="${phpcs.bin}" logoutput="true">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--report-diff=${basedir}/build/logs/checkstyle.diff" />
            <arg value="--standard=CakePHP" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php,*.bak.php,*/config/*,*/vendor/*,*/webroot/*" />
            <!-- <arg value="-v" /> -->
            <arg path="${basedir}/src/*" />
            <!--
            <arg path="${basedir}/plugins/*" />
            <arg path="${basedir}/tests/*" />
            -->
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <!-- PHP CBF -->
    <target name="phpcbf"
            unless="phpcbf.done"
            description="Automatically fix coding standard violations using PHP_CodeSniffer.">
        <exec executable="${phpcs.bin}" logoutput="true">
            <!-- Path relative to vendor/squizlabs/php_codesniffer -->
            <arg line="--config-set installed_paths ../../../vendor/cakephp/cakephp-codesniffer"/>
        </exec>
        <exec executable="${phpcbf.bin}" logoutput="true">
            <arg value="-n" /> <!-- only errors -->
            <arg value="--standard=CakePHP" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php,*.bak.php,*/config/*,*/vendor/*,*/webroot/*" />
            <!-- <arg value="-v" /> -->
            <arg path="${basedir}/src/*" />
            <!--
            <arg path="${basedir}/plugins/*" />
            <arg path="${basedir}/tests/*" />
            <arg path="${basedir}/plugins/*/src/*" />
            -->
        </exec>

        <property name="phpcbf.done" value="true"/>
    </target>

    <!-- PHP CPD -->
    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd.bin}" logoutput="true">
            <arg path="${basedir}/src/*" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd.bin}" logoutput="true">
            <arg value="--log-pmd=${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src/*" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <!-- PHP UNIT -->
    <target name="phpunit"
            depends="prepare"
            description="Run unit tests with PHPUnit">

        <echo message="Run unit tests" />
        <exec executable="${phpunit.bin}" logoutput="true" returnProperty="phpunit.result">
            <arg value="--configuration"/>
            <arg path="${phpunit.configuration}"/>
            <arg line="${phpunit.args}" />
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-crap4j"/>
            <arg path="${basedir}/build/logs/crap4j.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage/html"/>
            <arg value="--coverage-xml"/>
            <arg path="${basedir}/build/coverage/xml"/>
            <arg value="--coverage-php"/>
            <arg path="${basedir}/build/logs/phpunit.php"/>
            <arg value="--coverage-text=${basedir}/build/logs/phpunit.txt"/>
            <arg value="--log-junit"/>
            <arg path="${basedir}/build/logs/junit.xml"/>
            <arg value="--do-not-cache-result"/>
            <arg line="${phpunit.args}" />
        </exec>
    </target>

    <target name="phpunit-no-coverage"
            depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">

        <exec executable="${phpunit.bin}" logoutput="true" returnProperty="phpunit.result">
            <arg value="--no-coverage"/>
            <arg value="--configuration"/>
            <arg path="${phpunit.configuration}"/>
            <arg line="${phpunit.args}" />
        </exec>
    </target>

    <!-- PHP DOX -->
    <target name="phpdox"
            depends="phploc-ci,phpcs-ci,phpmd-ci"
            description="Generate project documentation using phpDox">

        <exec executable="${phpdox.bin}" dir="${basedir}/build" logoutput="true">
            <arg value="--file"/>
            <arg path="${phpdox.configuration}"/>
        </exec>
    </target>

    <!-- PHP STAN -->
    <target name="phpstan"
            unless="phpstan.done"
            description="Analyse code using PHPSTAN and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpstan.bin}" logoutput="true">
            <arg value="analyze" />
            <arg path="${basedir}/src/" />
            <arg path="${basedir}/tests/" />
        </exec>

        <property name="phpstan.done" value="true"/>
    </target>

    <target name="phpstan-ci"
            unless="phpstan.done"
            description="Analyse code using PHPSTAN and and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpstan.bin}" logoutput="true" output="${basedir}/build/logs/phpstan.xml">
            <arg value="analyze" />
            <arg value="--no-progress" />
            <arg value="--error-format=checkstyle" />
            <arg path="${basedir}/src/" />
            <arg path="${basedir}/tests/" />
        </exec>

        <property name="phpstan.done" value="true"/>
    </target>

    <!-- CHECK -->
    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${phpunit.result}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
</project>
